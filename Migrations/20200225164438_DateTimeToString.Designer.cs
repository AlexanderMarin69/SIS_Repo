// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vueproject.DB;

namespace vueproject.Migrations
{
    [DbContext(typeof(vueprojectDatabaseContext))]
    [Migration("20200225164438_DateTimeToString")]
    partial class DateTimeToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("vueproject.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankGiro");

                    b.Property<string>("City");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Country");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<string>("InvoiceAddress");

                    b.Property<string>("InvoicecPastDuePercentageFee");

                    b.Property<string>("LastName");

                    b.Property<string>("MomsRegNr");

                    b.Property<string>("OrgNr");

                    b.Property<string>("PaymentTerms");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PlusGiro");

                    b.Property<string>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("vueproject.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId");

                    b.Property<string>("AssociatedUserId");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CustomerId");

                    b.Property<string>("CustomerReference");

                    b.Property<string>("Description");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Fax");

                    b.Property<string>("InvoiceAddress");

                    b.Property<string>("Name");

                    b.Property<string>("OrganisationNumber");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SecondInvoiceAddress");

                    b.Property<string>("SecondPhoneNumber");

                    b.Property<string>("WebAddress");

                    b.Property<string>("ZipCode");

                    b.Property<string>("descriptiveDataForSelectList");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("vueproject.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId");

                    b.Property<string>("AssociatedCustomerId");

                    b.Property<string>("AssociatedUserId");

                    b.Property<string>("CustomerCity");

                    b.Property<string>("CustomerCountry");

                    b.Property<string>("CustomerInvoiceAddress");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerZipCode");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("DateCreatedString");

                    b.Property<decimal>("DecimalRoundUp");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("DeliveryDateString");

                    b.Property<decimal>("DeliveryFee");

                    b.Property<string>("EmailFrom");

                    b.Property<string>("EmailTo");

                    b.Property<string>("FilePath");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceDateString");

                    b.Property<decimal>("InvoiceFee");

                    b.Property<string>("InvoiceIsCredit");

                    b.Property<string>("InvoiceMessageText");

                    b.Property<DateTime>("InvoicePayDate");

                    b.Property<string>("InvoicePayDateString");

                    b.Property<string>("InvoicePdfGuid");

                    b.Property<string>("InvoiceTypeToSend");

                    b.Property<string>("InvoicecPastDuePercentageFee");

                    b.Property<decimal>("OptionalReminderFee");

                    b.Property<string>("PaymentTerms");

                    b.Property<string>("ReceiverCustomerId");

                    b.Property<string>("ReceiverReferenceName");

                    b.Property<string>("SendAs");

                    b.Property<string>("SenderName");

                    b.Property<decimal>("Tax");

                    b.Property<decimal>("TotalCost");

                    b.Property<decimal>("TotalCostWithoutTax");

                    b.Property<string>("UserBankGiro");

                    b.Property<string>("UserCity");

                    b.Property<string>("UserCountry");

                    b.Property<string>("UserFax");

                    b.Property<string>("UserInvoiceAddress");

                    b.Property<string>("UserMomsRegNr");

                    b.Property<string>("UserOrgNr");

                    b.Property<string>("UserPhoneNumber");

                    b.Property<string>("UserPlusGiro");

                    b.Property<string>("UserZipCode");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("vueproject.Models.InvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleNumber");

                    b.Property<string>("AssociatedInvoicePdfGuid");

                    b.Property<string>("AssociatedUserId");

                    b.Property<int?>("InvoiceId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceProducts");
                });

            modelBuilder.Entity("vueproject.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleNumber");

                    b.Property<string>("AssociatedUserId");

                    b.Property<decimal>("CostPerItem");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("EAN");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("ManufacturerSku");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductType");

                    b.Property<decimal>("StockBalance");

                    b.Property<string>("Supplier");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("vueproject.Models.Customer", b =>
                {
                    b.HasOne("vueproject.Models.ApplicationUser")
                        .WithMany("Customers")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("vueproject.Models.Invoice", b =>
                {
                    b.HasOne("vueproject.Models.ApplicationUser")
                        .WithMany("Invoices")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("vueproject.Models.InvoiceProduct", b =>
                {
                    b.HasOne("vueproject.Models.Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
